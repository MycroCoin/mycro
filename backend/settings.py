"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import dj_database_url
import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=*f9))56@c*dzlmm0%t@)v1=)d2*pbom51h+o7l%35xt92ya3t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG') == 'true'

ALLOWED_HOSTS = [
    'testserver',
    'localhost',
    '127.0.0.1',
    '192.168.99.100', # IP of minikube on paymahn's machine
    '35.230.122.2'  # IP of the server load balancer in GCP
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'backend.server',
    'graphene_django',
    'django_celery_results',
    'django_celery_beat',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DJANGO_DB_NAME', 'postgres'),
        'USER': os.environ.get('DJANGO_DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('DJANGO_DB_PASSWORD', ''),
        'HOST': os.environ.get('DJANGO_DB_HOST', 'localhost'),
        'PORT': os.environ.get('DJANGO_DB_PORT', '5432')
    }
}
# https://stackoverflow.com/questions/6353124/running-django-tests-with-sqlite
if 'test' in sys.argv or 'test_coverage' in sys.argv: #Covers regular testing and django-coverage
    DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'




# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

# Graphene config
GRAPHENE = {
    'SCHEMA': 'backend.schema.schema'
}

# Celery config
CELERY_RESULT_BACKEND = 'django-db'
CELERY_BROKER_URL = 'redis://localhost:6379/0'

CORS_ORIGIN_WHITELIST = (
    'localhost:3000'
    '192.168.99.100:30080' # ip of paymahn's minikube
    '35.197.53.29:3000' # ip of frontend load balancer for production
)

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT'
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

CSRF_TRUSTED_ORIGINS = (
    'localhost:3000',
    '127.0.0.1:3000',
)

CORS_ALLOW_CREDENTIALS = True

ALLOWED_DEPLOY_ENVS = ['parity', 'ropsten', 'mainnet']

# Application config
def deploy_env():
    deploy_env = os.environ.get('DEPLOY_ENV', 'parity')
    if deploy_env not in ALLOWED_DEPLOY_ENVS:
        raise ValueError(f'DEPLOY_ENV must be one of {ALLOWED_DEPLOY_ENVS} but is {deploy_env}')
    return deploy_env

def get_infura_api_key():
    return os.environ['INFURA_API_KEY']

def ethereum_private_key():
    env_var_name = 'ETHEREUM_PRIVATE_KEY'
    if deploy_env() == 'mainnet':
        # on mainnet we will never default to the dev key below
        return os.environ[env_var_name]
    else:
        # ----------- WARNING: DO NOT USE THIS PRIVATE KEY IN ANY PRODUCTION SENSE. NEVER PUT REAL ETH INTO THIS ACCOUNT
        return os.environ.get('ETHEREUM_PRIVATE_KEY', 'f49e1216edac9a5b0fab36f28037bfe8d5eb104b13f049b59decfac446e56ab3')

def parity_endpoint():
    return os.environ.get('PARITY_ENDPOINT', 'http://localhost:8545')

def github_token():
    return os.environ['GITHUB_TOKEN']

