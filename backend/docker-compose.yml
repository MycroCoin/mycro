version: '2'

services:
  ganache:
    image: trufflesuite/ganache-cli
    # need -p because cli and gui have different default ports I think
    # need -h because of how docker networking works. Ganaches decides what host to listen to and docker-compose names
    # the network 'ganache' instead of 127.0.0.1
    command: ganache-cli -p 7545 -h ganache -m "nose foot asset wage radar canyon online bread hurry train absent bachelor"
    ports:
      - "7545:7545"
  db:
    image: postgres:10
    environment:
      - POSTGRES_PASSWORD=loltesting
      - POSTGRES_USER=user
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
  redis:
    image: redis:4
    ports:
      - "6379:6379"
    command: >
        redis-server --requirepass loltesting
  worker:
    environment:
      # can't use localhost because that always points to the current container. To talk to another container, it's
      # network name is the service name
      - CELERY_BROKER_URL=redis://:loltesting@redis:6379/0
      - DJANGO_DB_URL=postgres://user:loltesting@db:5432/postgres
      - GANACHE_ENDPOINT=http://ganache:7545
    depends_on:
      - redis
      - db
      - ganache
      - server
    build:
      context: ..
      dockerfile: backend/server.Dockerfile
      # TODO run the beat as a separate service instead of embedding in the worker
    command: celery -A backend worker -l info -B --scheduler django_celery_beat.schedulers:DatabaseScheduler
  server:
    depends_on:
      - redis
      - db
      - ganache
    environment:
      # can't use localhost because that always points to the current container. To talk to another container, it's
      # network name is the service name
      - CELERY_BROKER_URL=redis://:loltesting@redis:6379/0
      - DJANGO_DB_URL=postgres://user:loltesting@db:5432/postgres
      - DEPLOY_MYCRO_DAO=true
      - GANACHE_ENDPOINT=http://ganache:7545
    build:
      context: ..
      dockerfile: backend/server.Dockerfile
    ports:
      - "8001:8000"
    # https://stackoverflow.com/questions/30063907/using-docker-compose-how-to-execute-multiple-commands
    command: >
      bash -c "./wait_for_it.sh db:5432 && ./manage.py migrate && ./manage.py runserver 0.0.0.0:8000"
#    volumes:
#      - '.:/mycro/backend'
  tests:
    build:
      context: ..
      dockerfile: backend/server.Dockerfile
    command: >
      ./manage.py test
    volumes:
      - '.:/mycro/backend'

