version: '2'

services:
  postgres:
    restart: always
    image: postgres:10
    environment:
      - POSTGRES_PASSWORD=loltesting
      - POSTGRES_USER=user
      - POSTGRES_DB=postgres
  redis:
    restart: always
    image: redis:4
    command: >
        redis-server --requirepass loltesting
  worker:
    restart: always
    environment:
      # can't use localhost because that always points to the current container. To talk to another container, its
      # network name is the service name
      - CELERY_BROKER_URL=redis://:loltesting@redis:6379/0
      - DEPLOY_ENV=parity
      - PARITY_ENDPOINT=http://parity:8545
      - DJANGO_DB_NAME=postgres
      - DJANGO_DB_USER=user
      - DJANGO_DB_PASSWORD=loltesting
      - DJANGO_DB_HOST=postgres
      - DJANGO_DB_PORT=5432
      - GITHUB_ORGANIZATION=MycroCoin-dev
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      # Infura API key isn't needed for local dev on parity
      - INFURA_API_KEY=""
    build:
      context: ..
      dockerfile: ops/dockerfiles/server.Dockerfile
      # TODO run the beat as a separate service instead of embedding in the worker
    command: >
      bash -c './wait_for_it.sh server:8000 && celery -A backend worker -l debug -B --scheduler django_celery_beat.schedulers:DatabaseScheduler'
  server:
    restart: always
    environment:
      # can't use localhost because that always points to the current container. To talk to another container, its
      # network name is the service name
      - CELERY_BROKER_URL=redis://:loltesting@redis:6379/0
      - DEPLOY_ENV=parity
      - PARITY_ENDPOINT=http://parity:8545
      - DJANGO_DB_NAME=postgres
      - DJANGO_DB_USER=user
      - DJANGO_DB_PASSWORD=loltesting
      - DJANGO_DB_HOST=postgres
      - DJANGO_DB_PORT=5432
      - GITHUB_ORGANIZATION=MycroCoin-dev
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      # Infura API key isn't needed for local dev on parity
      - INFURA_API_KEY=""
      - PYTHONUNBUFFERED=1
      - PROD=false

    build:
      context: ..
      dockerfile: ops/dockerfiles/server.Dockerfile
    # https://stackoverflow.com/questions/30063907/using-docker-compose-how-to-execute-multiple-commands
    command: >
      bash -c "./wait_for_it.sh postgres:5432 && ./wait_for_it.sh parity:8545 && ./manage.py migrate && ./manage.py runserver 0.0.0.0:8000"
  frontend:
    restart: always
    build:
      context: ..
      dockerfile: ops/dockerfiles/frontend.Dockerfile
    command: >
      bash -c "truffle compile --all && cp -rf /mycro/build /mycro/src/ && npm start"
    environment:
      - REACT_APP_GRAPHQL_ENDPOINT=https://$API_HOST/graphql
  nginx:
    restart: always
    build:
      context: ..
      dockerfile: ops/dockerfiles/nginx-prod.Dockerfile
      args:
        - FRONTEND_HOST=$FRONTEND_HOST
        - API_HOST=$API_HOST
    depends_on:
      - frontend
      - server
    ports:
      - "80:80"
      - "443:443"
    command: bash -c "./wait_for_it.sh server:8000 && ./wait_for_it.sh frontend:3000 && exec nginx -g 'daemon off;'"

