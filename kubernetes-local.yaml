# -------------------------------------
# Services
# -------------------------------------

#---
# parity
apiVersion: v1
kind: Service
metadata:
  labels:
    service: parity
  name: parity
spec:
  type: NodePort
  ports:
  - name: "8545"
    port: 8545
    targetPort: 8545
    nodePort: 30045
  selector:
    service: parity


---
# postgres
apiVersion: v1
kind: Service
metadata:
  labels:
    service: db
  name: db
spec:
  ports:
  - name: "5432"
    port: 5432
    targetPort: 5432
  selector:
    service: db


---
# redis
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    service: redis
  name: redis
spec:
  ports:
  - name: "6379"
    port: 6379
    targetPort: 6379
  selector:
    service: redis

---
# django server
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    service: server
  name: server
spec:
  type: NodePort
  ports:
  - name: "8001"
    port: 8001
    targetPort: 8000
    nodePort: 30081
  selector:
    service: server


---
# frontend
apiVersion: v1
kind: Service
metadata:
  labels:
    service: frontend
  name: frontend
spec:
  type: NodePort
  ports:
  - name: "3000"
    port: 3000
    targetPort: 3000
    nodePort: 30080
  selector:
    service: frontend


# -------------------------------------
# Deployments
# -------------------------------------

---
# parity
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: parity
  labels:
    service: parity
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: parity
    spec:
      containers:
      - image: mycro-parity-dev
        args:
        - -l
        - info
        imagePullPolicy: Never
        name: parity
        ports:
        - containerPort: 8545

      restartPolicy: Always
---
# postgres
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: db
  labels:
    service: db
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: db
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          value: postgres
        - name: POSTGRES_PASSWORD
          value: loltesting
        - name: POSTGRES_USER
          value: user
        image: postgres:10
        name: db
        ports:
        - containerPort: 5432
        resources: {}
      restartPolicy: Always
status: {}
#
---
# redis
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    service: redis
  name: redis
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        service: redis
    spec:
      containers:
      - args:
        - redis-server
        - --requirepass
        - loltesting
        image: redis:4
        name: redis
        ports:
        - containerPort: 6379
        resources: {}
      restartPolicy: Always
status: {}
#
---
# django server
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
  labels:
    service: server
  name: server
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        service: server
    spec:
      containers:
      - command: ['bash', '-c', './wait_for_it.sh db:5432 && ./wait_for_it.sh parity:8545 && ./manage.py migrate && ./manage.py runserver 0.0.0.0:8000']
        env:
        - name: CELERY_BROKER_URL
          value: redis://:loltesting@redis:6379/0
        - name: DEPLOY_ENV
          value: parity
        - name: PARITY_ENDPOINT
          value: http://parity:8545
        - name: DJANGO_DB_NAME
          value: postgres
        - name: DJANGO_DB_USER
          value: user
        - name: DJANGO_DB_PASSWORD
          value: loltesting
        - name: DJANGO_DB_HOST
          value: db
        - name: DJANGO_DB_PORT
          value: "5432"
        - name: ETHEREUM_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: eth-private-key
              key: value
        - name: INFURA_API_KEY
          valueFrom:
            secretKeyRef:
              name: infura-api-key
              key: value
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: DEBUG
          value: "true"
        image: mycro-backend
        imagePullPolicy: Never
        name: server
        ports:
        - containerPort: 8000
        resources: {}
      restartPolicy: Always
status: {}

---
# frontend
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: frontend
  labels:
    service: frontend
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: frontend
    spec:
      containers:
      - command: ['bash', '-c', ' truffle compile --all && npm start']
        env:
        - name: REACT_APP_GRAPHQL_ENDPOINT
          value: http://192.168.99.100:30081/graphql
        image: mycro-frontend
        imagePullPolicy: Never
        name: frontend
        ports:
        - containerPort: 3000
      restartPolicy: Always

---
# worker
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    service: worker
  name: worker
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        service: worker
    spec:
      containers:
      - command: ['bash', '-c', './wait_for_it.sh server:8001 && celery -A backend worker -l debug -B --scheduler django_celery_beat.schedulers:DatabaseScheduler']
        env:
        - name: CELERY_BROKER_URL
          value: redis://:loltesting@redis:6379/0
        - name: DEPLOY_ENV
          value: parity
        - name: PARITY_ENDPOINT
          value: http://parity:8545
        - name: DJANGO_DB_NAME
          value: postgres
        - name: DJANGO_DB_USER
          value: user
        - name: DJANGO_DB_PASSWORD
          value: loltesting
        - name: DJANGO_DB_HOST
          value: db
        - name: DJANGO_DB_PORT
          value: "5432"
        - name: GITHUB_ORGANIZATION
          value: MycroCoin-dev
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: github-token
              key: value
        - name: PARITY_ENDPOINT
          value: http://parity:8545
        - name: INFURA_API_KEY
          valueFrom:
            secretKeyRef:
              name: infura-api-key
              key: value
        image: mycro-backend
        imagePullPolicy: Never
        name: worker
        resources: {}
      restartPolicy: Always
status: {}
